import  { useEffect, useState } from "react";
import { TonConnectUI } from "@tonconnect/ui";
import Web3 from 'web3';
import axios from 'axios';

const tonConnectUI = new TonConnectUI({
    manifestUrl: 'https://res.cloudinary.com/dd6sildog/raw/upload/v1733909863/tonmanifest_wjbnog.json',
    walletsListConfiguration: {
        includeWallets: [
            {
                appName: 'telegramTonWallet',
                name: 'Telegram TON Wallet',
                imageUrl: 'https://example.com/telegram-ton-wallet.png',
                aboutUrl: 'https://web3.telegram.org',
                universalLink: 'https://t.me/TelegramTonWallet?attach=wallet',
                bridgeUrl: 'https://ton-connect-bridge.bgwapi.io/bridge',
                platforms: ['ios', 'android', 'macos', 'windows', 'linux'],
            },
            {
                appName: 'WalletsLite',
                name: 'Bitget Wallet Lite',
                imageUrl: 'https://raw.githubusercontent.com/bitgetwallet/download/main/logo/png/bitget_wallet_lite_logo.png',
                aboutUrl: 'https://web3.bitget.com',
                universalLink: 'https://t.me/BitgetWallet_TGBot?attach=wallet',
                bridgeUrl: 'https://ton-connect-bridge.bgwapi.io/bridge',
                platforms: ['ios', 'android', 'macos', 'windows', 'linux'],
            },
            {
                name: 'Bitget Wallet',
                appName: 'bitgetTonWallet',
                jsBridgeKey: 'bitgetTonWallet',
                imageUrl: 'https://raw.githubusercontent.com/bitkeepwallet/download/main/logo/png/bitget%20wallet_logo_iOS.png',
                aboutUrl: 'https://web3.bitget.com',
                bridgeUrl: 'https://ton-connect-bridge.bgwapi.io/bridge',
                universalLink: 'https://bkcode.vip/ton-connect',
                deepLink: 'bitkeep://',
                platforms: ['ios', 'android', 'chrome'],
            },
        ],
    },
});

const App = () => {
    const [walletConnected, setWalletConnected] = useState(false);
    const [balance, setBalance] = useState(null);
    const [message, setMessage] = useState('');
    const [binanceAddress, setBinanceAddress] = useState('');
    const [currentInfo, setCurrentInfo] = useState({});
    const [proof, setProof] = useState('');

    useEffect(() => {
        // update tonProof when refresh
        setProof(localStorage.getItem("tonProof") ?? '');
    }, []);

    useEffect(() => {
        tonConnectUI.onStatusChange((wallet) => {
            console.log('onStatusChange:', wallet);
            if (wallet?.connectItems?.tonProof && 'proof' in wallet.connectItems.tonProof) {
                localStorage.setItem('tonProof', JSON.stringify(wallet.connectItems.tonProof.proof));
                setProof(JSON.stringify(wallet.connectItems.tonProof.proof));
            }
        });
    }, []);

    const handleConnectBinanceWallet = async () => {
        if (window.ethereum) {
            const web3 = new Web3(window.ethereum);
            try {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const accounts = await web3.eth.getAccounts();
                setBinanceAddress(accounts[0]);
                setWalletConnected(true);
                setMessage('Binance wallet connected successfully!');
            } catch (error) {
                console.error(error);
                setMessage('Failed to connect Binance wallet.');
            }
        } else {
            setMessage('Please install MetaMask to connect your wallet.');
        }
    };

    const openBitgetWalletLite = async () => {
        if (tonConnectUI.connected) {
            await disconnect();
        }
        await tonConnectUI.openSingleWalletModal("bitgetWalletLite");
    };

    const openBitgetTonWallet = async () => {
        if (tonConnectUI.connected) {
            await disconnect();
        }
        await tonConnectUI.openSingleWalletModal("bitgetTonWallet");
    };

    const openTelegramWallet = async () => {
        if (tonConnectUI.connected) {
            await disconnect();
        }
        await tonConnectUI.openSingleWalletModal("tonWallet");
    };

    const getWallets = async () => await tonConnectUI.getWallets();
    const openModal = async () => await tonConnectUI.openModal();
    const closeModal = async () => tonConnectUI.closeModal();
    const currentWallet = () => tonConnectUI.wallet;
    const currentWalletInfo = () => tonConnectUI.walletInfo;
    const currentAccount = () => tonConnectUI.account;
    const currentIsConnectedStatus = () => tonConnectUI.connected;
    const disconnect = async () => await tonConnectUI.disconnect();

    const onStatusChange = async () => {
        const unsubscribe = tonConnectUI.onStatusChange((walletInfo) => {
            console.log("walletInfo", walletInfo);
        });
        return unsubscribe;
    };

    const onModalChange = async () => {
        const unsubscribe = tonConnectUI.onModalStateChange((WalletsModalState) => {
            console.log("WalletsModalState", WalletsModalState);
        });
        return unsubscribe;
    };

    const handleFetchBalance = async () => {
        try {
            const response = await axios.get('https://api.ton.org/getBalance/your-ton-address');
            setBalance(response.data.balance);
            setMessage('Balance fetched successfully!');
        } catch (error) {
            console.error(error);
            setMessage('Failed to fetch balance.');
        }
    };

    const handleTransfer = async () => {
        try {
            const web3 = new Web3(window.ethereum);
            await web3.eth.sendTransaction({
                from: binanceAddress,
                to: 'TON-Wallet-Address',
                value: web3.utils.toWei('amount-in-ETH', 'ether'),
            });
            setMessage('Transfer successful!');
        } catch (error) {
            console.error(error);
            setMessage('Failed to transfer.');
        }
    };

    const funcNames = [
        "openBitgetWalletLite",
        "openBitgetTonWallet",
        "openModal",
        "currentWalletInfo",
        "currentAccount",
        "currentIsConnectedStatus",
        "disconnect",
        "getWallets",
        "onModalChange",
    ];

    return (
        <>
            <h2>Ton Connect Mr John</h2>
            <div style={{ display: "flex", flexWrap: 'wrap', gap: 20, marginBottom: 20 }}>
                {[
                    openBitgetWalletLite,
                    openBitgetTonWallet,
                    openModal,
                    closeModal,
                    currentWallet,
                    currentWalletInfo,
                    currentAccount,
                    currentIsConnectedStatus,
                    disconnect,
                    getWallets,
                    onStatusChange,
                    onModalChange,
                ].map((func, index) => (
                    <div key={index}>
                        <button
                            onClick={async () => {
                                try {
                                    setCurrentInfo({
                                        "function name": func.name,
                                        "function returns": await func(),
                                    });
                                } catch (e) {
                                    console.error(e);
                                }
                            }}
                        >
                            {`${func?.name || funcNames[index]} Button`}
                        </button>
                    </div>
                ))}
            </div>
            {Object.keys(currentInfo).map((k) => (
                <div key={k} style={{ wordWrap: "break-word" }}>
                    {k}: {JSON.stringify(currentInfo[k])}
                </div>
            ))}
            {proof && <p style={{ wordWrap: "break-word" }}>proof: {proof}</p>}
            <div>
                <button onClick={handleConnectBinanceWallet}>Connect Binance Wallet</button>
            </div>
 
            <div>
                <button onClick={handleFetchBalance}>Fetch Balance</button>
                {balance && <p>Balance: {balance} TON</p>}
            </div>
        </>
    );
};

export default App;
